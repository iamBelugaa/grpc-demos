// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamTimeService_StreamServerTime_FullMethodName = "/stream.StreamTimeService/StreamServerTime"
	StreamTimeService_StreamServerLog_FullMethodName  = "/stream.StreamTimeService/StreamServerLog"
)

// StreamTimeServiceClient is the client API for StreamTimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTimeServiceClient interface {
	StreamServerTime(ctx context.Context, in *StreamTimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTimeResponse], error)
	StreamServerLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogStreamRequest, LogStreamResponse], error)
}

type streamTimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTimeServiceClient(cc grpc.ClientConnInterface) StreamTimeServiceClient {
	return &streamTimeServiceClient{cc}
}

func (c *streamTimeServiceClient) StreamServerTime(ctx context.Context, in *StreamTimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTimeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamTimeService_ServiceDesc.Streams[0], StreamTimeService_StreamServerTime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTimeRequest, StreamTimeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamTimeService_StreamServerTimeClient = grpc.ServerStreamingClient[StreamTimeResponse]

func (c *streamTimeServiceClient) StreamServerLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogStreamRequest, LogStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamTimeService_ServiceDesc.Streams[1], StreamTimeService_StreamServerLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogStreamRequest, LogStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamTimeService_StreamServerLogClient = grpc.ClientStreamingClient[LogStreamRequest, LogStreamResponse]

// StreamTimeServiceServer is the server API for StreamTimeService service.
// All implementations must embed UnimplementedStreamTimeServiceServer
// for forward compatibility.
type StreamTimeServiceServer interface {
	StreamServerTime(*StreamTimeRequest, grpc.ServerStreamingServer[StreamTimeResponse]) error
	StreamServerLog(grpc.ClientStreamingServer[LogStreamRequest, LogStreamResponse]) error
	mustEmbedUnimplementedStreamTimeServiceServer()
}

// UnimplementedStreamTimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamTimeServiceServer struct{}

func (UnimplementedStreamTimeServiceServer) StreamServerTime(*StreamTimeRequest, grpc.ServerStreamingServer[StreamTimeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamServerTime not implemented")
}
func (UnimplementedStreamTimeServiceServer) StreamServerLog(grpc.ClientStreamingServer[LogStreamRequest, LogStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamServerLog not implemented")
}
func (UnimplementedStreamTimeServiceServer) mustEmbedUnimplementedStreamTimeServiceServer() {}
func (UnimplementedStreamTimeServiceServer) testEmbeddedByValue()                           {}

// UnsafeStreamTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTimeServiceServer will
// result in compilation errors.
type UnsafeStreamTimeServiceServer interface {
	mustEmbedUnimplementedStreamTimeServiceServer()
}

func RegisterStreamTimeServiceServer(s grpc.ServiceRegistrar, srv StreamTimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamTimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamTimeService_ServiceDesc, srv)
}

func _StreamTimeService_StreamServerTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTimeServiceServer).StreamServerTime(m, &grpc.GenericServerStream[StreamTimeRequest, StreamTimeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamTimeService_StreamServerTimeServer = grpc.ServerStreamingServer[StreamTimeResponse]

func _StreamTimeService_StreamServerLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTimeServiceServer).StreamServerLog(&grpc.GenericServerStream[LogStreamRequest, LogStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamTimeService_StreamServerLogServer = grpc.ClientStreamingServer[LogStreamRequest, LogStreamResponse]

// StreamTimeService_ServiceDesc is the grpc.ServiceDesc for StreamTimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamTimeService",
	HandlerType: (*StreamTimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamServerTime",
			Handler:       _StreamTimeService_StreamServerTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamServerLog",
			Handler:       _StreamTimeService_StreamServerLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/stream.proto",
}
